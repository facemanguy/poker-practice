{"version":3,"sources":["Components/CreateDeck.js","App.js","serviceWorker.js","index.js"],"names":["playerCards","CreateDeck","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","CardsInPlay","DeckID","PlayerCard1","PlayerCard2","ComCard1","ComCard2","ComCard3","ComCard4","ComCard5","_this2","Axios","get","then","Response","console","log","data","setState","cards","deck_id","FirstCardSuit","suit","playerHand","test","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","entries","Symbol","iterator","next","done","_ref3","value","_ref2","slicedToArray","index","push","react_default","a","createElement","key","code","src","image","alt","err","return","CardParser","className","React","Component","App","href","CreateDeck_CreateDeck","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ff341495.chunk.js","sourcesContent":["import React from 'react';\r\nimport Axios from 'axios';\r\n\r\n\r\nlet playerCards = [];\r\n\r\nexport default class CreateDeck extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {         \r\n            CardsInPlay: [],\r\n            DeckID: '',\r\n            PlayerCard1: {},\r\n            PlayerCard2: {},\r\n            ComCard1: {},\r\n            ComCard2: {},\r\n            ComCard3: {},\r\n            ComCard4: {},\r\n            ComCard5: {},\r\n        }\r\n    }\r\n    \r\n\r\n    componentDidMount(){\r\n        Axios.get(`https://deckofcardsapi.com/api/deck/new/draw/?count=7`, {})\r\n        .then(Response=>{\r\n            console.log(Response.data)\r\n            this.setState({\r\n                CardsInPlay: Response.data.cards,\r\n                DeckID: Response.data.deck_id,\r\n                PlayerCard1: Response.data.cards[0],\r\n                PlayerCard2: Response.data.cards[1],\r\n                ComCard1: Response.data.cards[2],\r\n                ComCard2: Response.data.cards[3],\r\n                ComCard3: Response.data.cards[4],\r\n                ComCard4: Response.data.cards[5],\r\n                ComCard5: Response.data.cards[6],\r\n            });\r\n            playerCards = Response.data.cards[0];\r\n            console.log(playerCards);\r\n            console.log(this.state)\r\n\r\n        })\r\n    }\r\n    \r\n    CardParser() {\r\n        let FirstCardSuit = this.state.PlayerCard1.suit;\r\n        if (FirstCardSuit === 'SPADES'){\r\n            console.log('Spades');\r\n        }else if (FirstCardSuit === 'CLUBS'){\r\n            console.log('Clubs'); \r\n        }else if (FirstCardSuit === 'HEARTS'){\r\n            console.log('Hearts');\r\n        }else if (FirstCardSuit === 'DIAMONDS'){\r\n            console.log('Diamonds');\r\n        }\r\n    }\r\n\r\n\r\n    render(){\r\n        const { CardsInPlay} = this.state;\r\n        let playerHand = [];\r\n        let test = [];\r\n        for (const [index, value] of CardsInPlay.entries()) {\r\n            playerHand.push(<div><h2 key={index}>{value.code} {value.value} {value.suit}</h2><img src={value.image} alt={value.code}></img></div>)\r\n            test.push(CardsInPlay[index].value);\r\n        }\r\n        console.log(test);\r\n        console.log('test');\r\n        if(test !== []){\r\n            console.log('success');\r\n        }\r\n        this.CardParser();\r\n        /*this.state.CardsInPlay.forEach((card, i) =>{\r\n            playerHand.push(<CardParser item={card.cards.value}/>)\r\n        })*/\r\n        \r\n        return(\r\n                <div className=\"card-display\">{playerHand}</div>            \r\n        );\r\n    }\r\n}","import React from 'react';\r\n//import logo from './logo.svg';\r\nimport './App.css';\r\nimport CreateDeck from './Components/CreateDeck';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>Poker practice calculator</h1> \r\n        <p>A project by john meyer</p>\r\n        <a href=\"https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1\">The Api I will be using</a>\r\n        <a href=\"https://github.com/crobertsbmw/deckofcards\">Github</a>\r\n      </header>\r\n      <CreateDeck />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}