{"version":3,"sources":["Components/Poker.js","App.js","serviceWorker.js","index.js"],"names":["currentDeck","Poker","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","playerCards","communityCards","drawCard","bind","assertThisInitialized","Axios","get","concat","then","Response","console","log","data","_this2","setState","cards","flopCall","createFlop","catch","error","piles","_this3","deck_id","items","flop","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","entries","Symbol","iterator","next","done","_ref5","value","_ref2","slicedToArray","index","amount","push","react_default","a","createElement","key","code","src","image","alt","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_ref6","_ref4","suit","className","onClick","React","Component","App","href","Poker_Poker","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c8e5c20f.chunk.js","sourcesContent":["import React from 'react';\r\nimport Axios from 'axios';\r\n\r\nlet currentDeck = 'new';\r\n\r\nexport default class Poker extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            playerCards: [],\r\n            communityCards: [],\r\n        }\r\n        this.drawCard = this.drawCard.bind(this);\r\n    }\r\n\r\n    async drawCard(){\r\n        Axios.get(`https://deckofcardsapi.com/api/deck/${currentDeck}/draw/?count=3`, {})\r\n        .then(Response => {\r\n            console.log(Response.data);\r\n            this.setState({ communityCards: Response.data.cards});\r\n            const flopCall = (this.state.communityCards)\r\n            this.createFlop(flopCall);\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    async createFlop(flopCall){\r\n        await\r\n        Axios.get(`https://deckofcardsapi.com/api/deck/${currentDeck}/pile/flop/add/${flopCall}`, {})\r\n        .then(Response =>{\r\n            console.log(Response.data.piles)    \r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    async componentDidMount() {\r\n        Axios.get(`https://deckofcardsapi.com/api/deck/${currentDeck}/draw/?count=2`, {})\r\n        .then(Response => {\r\n            console.log(Response.data);\r\n            this.setState({ playerCards: Response.data.cards});\r\n            currentDeck = (Response.data.deck_id)\r\n            console.log(currentDeck)\r\n        })\r\n        .catch(error => {\r\n            console.log(error);\r\n        });\r\n    }\r\n\r\n    render() {\r\n         const { playerCards} = this.state;\r\n         const { communityCards} = this.state;\r\n         let items =[];\r\n         let flop =[];\r\n         for (const [index, amount] of communityCards.entries()) {\r\n            flop.push(<div><p key={index}>{amount.code}</p><img src={amount.image} alt={amount.code}></img></div>)\r\n            console.log('floptest');\r\n         }\r\n         for (const [index, value] of playerCards.entries()) {\r\n            items.push(<div><p key={index}>{value.code}</p><h1>{value.value} {value.suit}</h1><img src={value.image} alt={value.code}></img></div>)\r\n        }\r\n         return(\r\n             <div>\r\n                 <div className=\"Game-board\">{items}</div>\r\n                 <button onClick={this.drawCard}>Draw</button>\r\n                <div>{flop}</div>\r\n             </div>\r\n         );\r\n    }\r\n};","import React from 'react';\r\n//import logo from './logo.svg';\r\nimport './App.css';\r\nimport Poker from './Components/Poker';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <h1>Poker practice calculator</h1> \r\n        <p>A project by john meyer</p>\r\n        <a href=\"https://deckofcardsapi.com/api/deck/new/shuffle/?deck_count=1\">The Api I will be using</a>\r\n        <a href=\"https://github.com/crobertsbmw/deckofcards\">Github</a>\r\n      </header>\r\n      <section>\r\n      <Poker />\r\n      </section>\r\n      <p>my app test</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}